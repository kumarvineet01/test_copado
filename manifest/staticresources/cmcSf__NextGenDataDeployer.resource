{
  "recordTypeMap": {},
  "RecordSetBundles": [
    {
      "Records": [
        {
          "attributes": {
            "type": "copado__Function__c",
            "url": "/services/data/v61.0/sobjects/copado__Function__c/a0oUB000001K7snYAC"
          },
          "copado__ApexClass__c": "cmcSf.DataSetDeployFunctionCallback",
          "copado__API_Name__c": "SFDX_Data_Set",
          "copado__Callback_Type__c": "ApexClass",
          "copado__Image_Name__c": "copado-function-core:v1",
          "copado__Options__c": "[ ]",
          "copado__Parameters__c": "[ {\n  \"required\" : true,\n  \"name\" : \"sourceOrgId\",\n  \"defaultValue\" : \"{$Source.Id}\"\n}, {\n  \"required\" : true,\n  \"name\" : \"sourceInstanceUrl\",\n  \"defaultValue\" : \"{$Source.Credential.EndpointURL}\"\n}, {\n  \"required\" : true,\n  \"name\" : \"sourceSessionId\",\n  \"defaultValue\" : \"{$Source.Credential.SessionId}\"\n}, {\n  \"required\" : true,\n  \"name\" : \"destinationOrgId\",\n  \"defaultValue\" : \"{$Destination.Id}\"\n}, {\n  \"required\" : true,\n  \"name\" : \"destinationInstanceUrl\",\n  \"defaultValue\" : \"{$Destination.Credential.EndpointURL}\"\n}, {\n  \"required\" : true,\n  \"name\" : \"destinationSessionId\",\n  \"defaultValue\" : \"{$Destination.Credential.SessionId}\"\n}, {\n  \"required\" : true,\n  \"name\" : \"dataJson\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson__c}\"\n}, {\n  \"required\" : true,\n  \"name\" : \"maxBuffer\",\n  \"defaultValue\" : \"5242880\"\n}, {\n  \"required\" : true,\n  \"name\" : \"pollInterval\",\n  \"defaultValue\" : \"5000\"\n} ]",
          "copado__Result_Viewer_Component__c": "cmcSf:resultViewerForDataDeploy",
          "copado__Script__c": "#!/usr/bin/env node\n'use strict';\n\n/**\n * Performs deployment of data based on the data template details provided as input\n * Returns (If ACTION success) the data records are successfully inserted/upserted from the source to the destination org\n * (If ACTION failed) Returns details with error status on the result record\n * @param sourceOrgId\n * @param sourceInstanceUrl\n * @param sourceSessionId\n * @param destinationOrgId\n * @param destinationInstanceUrl\n * @param destinationSessionId\n * @param maxBuffer\n * @param dataJson\n * @param pollInterval\n */\n\nconst child_process = require('child_process'),\n\tfs = require('fs'),\n\t{\n\t\tsourceOrgId,\n\t\tsourceInstanceUrl,\n\t\tsourceSessionId,\n\t\tdestinationOrgId,\n\t\tdestinationInstanceUrl,\n\t\tdestinationSessionId,\n\t\tdataJson,\n\t\tmaxBuffer,\n\t\tCF_BACKEND_ENDPOINT,\n\t\tpollInterval\n\t} = process.env,\n\tresponse = {\n\t\tSTATUS: {\n\t\t\tREQUEST_ACCEPTED: 'REQUEST_ACCEPTED',\n\t\t\tFAILED: 'FAILED',\n\t\t\tCOMPLETED: 'COMPLETED'\n\t\t},\n\t\tTYPE: {\n\t\t\tJSON: 'json',\n\t\t\tBUFFER: 'buffer'\n\t\t}\n\t},\n\trequest = {\n\t\tGET: 'GET',\n\t\tPOST: 'POST'\n\t},\n\tTEMP_DIRECTORY = getPath('/tmp'),\n\tRESULT_ZIP_FILE_PATH = `${TEMP_DIRECTORY}/deploymentResult.zip`,\n\tDATA_DEPLOYMENT_RESULT_DIR = `${TEMP_DIRECTORY}/result`,\n\tMAXBUFFER = parseInt(maxBuffer),\n\tRESULT_INFO = {\n\t\tLEVEL: {\n\t\t\tINFO: 'INFO',\n\t\t\tERROR: 'ERROR',\n\t\t\tWARN: 'WARN'\n\t\t},\n\t\tCATEGORY: {\n\t\t\tUNKNOWN_EXCEPTION: 'Unknown Exception',\n\t\t\tCOPADO_INFO: 'Copado Info',\n\t\t\tCOPADO_SERVICE: 'Copado Service',\n\t\t\tFILE_SYSTEM: 'File System'\n\t\t},\n\t\tADDITIONAL_INFORMATION: {\n\t\t\tPOPULATE_INFO_ON_RESULT: 'Populate Information on the result record',\n\t\t\tEXTRACT_DATA_DEPLOYMENT_RESULT: 'Extract Data Deployment Result',\n\t\t\tUPLOAD_FILES: 'Upload Files'\n\t\t}\n\t},\n\tSTDIO = {\n\t\tINHERIT: 'inherit'\n\t},\n\tFILE_NAMES = {\n\t\tRESULT_VIEWER: 'ResultViewer.json',\n\t\tDEPLOYMENT_SUMMARY_JSON: 'deployment_summary.json',\n\t\tDEPLOYMENT_SUMMARY_VIEWER: 'DeploymentSummaryViewer.json'\n\t},\n\tHEADER_ICON = {\n\t\tRESULT_VIEWER: 'standard:note',\n\t\tDEPLOYMENT_SUMMARY_VIEWER: 'standard:picklist_type'\n\t},\n\tresultViewerJson = [],\n\tCUSTOM_ERROR = {\n\t\tCOMMAND_EXECUTION_ERROR: 'CommandExecutionError'\n\t};\nconst TABLE_COLUMNS = {\n\tRESULT_VIEWER: [\n\t\t{\n\t\t\tlabel: 'Level',\n\t\t\tfieldName: 'Level',\n\t\t\ttype: 'text',\n\t\t\twrapText: true,\n\t\t\tcustomLabel: 'Level',\n\t\t\tinitialWidth: 80\n\t\t},\n\t\t{\n\t\t\tlabel: 'Category',\n\t\t\tfieldName: 'Category',\n\t\t\ttype: 'text',\n\t\t\twrapText: true,\n\t\t\tcustomLabel: 'Category',\n\t\t\tinitialWidth: 120\n\t\t},\n\t\t{\n\t\t\tlabel: 'Additional Information',\n\t\t\tfieldName: 'AdditionalInformation',\n\t\t\ttype: 'text',\n\t\t\twrapText: true,\n\t\t\tcustomLabel: 'Additional_Information',\n\t\t\tinitialWidth: 200\n\t\t},\n\t\t{\n\t\t\tlabel: 'Message',\n\t\t\tfieldName: 'Message',\n\t\t\ttype: 'text',\n\t\t\twrapText: true,\n\t\t\tcustomLabel: 'Message'\n\t\t}\n\t],\n\tDEPLOYMENT_SUMMARY_VIEWER: [\n\t\t{\n\t\t\tlabel: 'Template Name',\n\t\t\tfieldName: 'templateUrl',\n\t\t\ttype: 'url',\n\t\t\ttypeAttributes: {\n\t\t\t\tlabel: {\n\t\t\t\t\tfieldName: 'templateName'\n\t\t\t\t}\n\t\t\t},\n\t\t\tcustomLabel: 'Template_Name',\n\t\t\thideDefaultActions: true\n\t\t},\n\t\t{\n\t\t\tlabel: 'SObject',\n\t\t\tfieldName: 'objectName',\n\t\t\ttype: 'text',\n\t\t\twrapText: true,\n\t\t\tcustomLabel: 'SObject',\n\t\t\thideDefaultActions: true\n\t\t},\n\t\t{\n\t\t\tlabel: 'Total',\n\t\t\tfieldName: 'totalRecords',\n\t\t\ttype: 'number',\n\t\t\twrapText: true,\n\t\t\tcustomLabel: 'Total',\n\t\t\thideDefaultActions: true,\n\t\t\tinitialWidth: 100\n\t\t},\n\t\t{\n\t\t\tlabel: 'Failed',\n\t\t\tfieldName: 'failedRecords',\n\t\t\ttype: 'number',\n\t\t\twrapText: true,\n\t\t\tcustomLabel: 'Failed',\n\t\t\thideDefaultActions: true,\n\t\t\tinitialWidth: 100\n\t\t},\n\t\t{\n\t\t\tlabel: 'Generated Ids',\n\t\t\tfieldName: 'generatedIds',\n\t\t\ttype: 'number',\n\t\t\twrapText: true,\n\t\t\tcustomLabel: 'Generated_Ids',\n\t\t\thideDefaultActions: true,\n\t\t\tinitialWidth: 120\n\t\t}\n\t]\n};\nconst HEADER = {\n\tRESULT_VIEWER: {\n\t\tlabel: 'Execution Details',\n\t\tcustomLabel: 'Execution_Details'\n\t},\n\tDEPLOYMENT_SUMMARY_VIEWER: {\n\t\tlabel: 'Data Deployment Result',\n\t\tcustomLabel: 'Data_Deployment_Result'\n\t}\n};\nconst CSV_COLUMN = {\n\tlabel: 'CSV File',\n\tfieldName: 'csvFileLink',\n\ttype: 'button-icon',\n\ttypeAttributes: {\n\t\ticonName: {\n\t\t\tfieldName: 'csvFileIcon'\n\t\t},\n\t\tdisabled: {\n\t\t\tfieldName: 'isCsvFileIconDisabled'\n\t\t},\n\t\ttype: 'url',\n\t\tfieldName: 'csvFileLink',\n\t\tvariant: 'bare'\n\t},\n\twrapText: true,\n\tcustomLabel: 'CSV_File',\n\thideDefaultActions: true,\n\tinitialWidth: 80\n};\n\nlet executionError;\n\nasync function execute() {\n\ttry {\n\t\t// extract data\n\t\tconst dataJsonPayload = JSON.parse(dataJson);\n\n\t\tconst dataTemplateId = dataJsonPayload.dataTemplateId;\n        const queryFilterList = dataJsonPayload.queryFilterList;\n        const filterLogic = dataJsonPayload.filterLogic;\n\n\t\tconst sourceDataSetId = dataJsonPayload.sourceDataSetId;\n\t\tconst destinationDataSetId = dataJsonPayload.destinationDataSetId;\n\t\tconst commitMessage = dataJsonPayload.commitMessage ? dataJsonPayload.commitMessage : null;\n\t\t// main process\n\t\tconst apiPayload = this.populateCredentialsValues(sourceDataSetId, destinationDataSetId, dataTemplateId, queryFilterList, filterLogic, commitMessage);\n\t\t\n\t\tconst deploymentId = await this.initiateDataDeployment(apiPayload);\n\t\tthis.logger('Deployment Id', deploymentId);\n\t\tawait this.pollDataDeploymentStatus(deploymentId);\n\n\t\t// depend on type of process: generate/deploy. There will be different table columns needed\n\t\tthis.configureResultColumn(sourceDataSetId, destinationDataSetId);\n\t\tawait this.downloadDataDeploymentResult(deploymentId);\n\t\tthis.uploadDataDeploymentInfoOnResult();\n\t} catch (err) {\n\t\tthis.logger('Error stack', err.stack);\n\t\tif (!(err instanceof CommandExecutionError)) {\n\t\t\tthis.populateResultViewer(RESULT_INFO.LEVEL.ERROR, RESULT_INFO.CATEGORY.UNKNOWN_EXCEPTION, `See logs for more info`, err.message);\n\t\t}\n\t\texecutionError = err.message || err?.toString() || `Unknown Error occurred`;\n\t} finally {\n\t\tif (resultViewerJson?.length) {\n\t\t\tthis.uploadResultTableJson(\n\t\t\t\tresultViewerJson,\n\t\t\t\tTABLE_COLUMNS.RESULT_VIEWER,\n\t\t\t\tFILE_NAMES.RESULT_VIEWER,\n\t\t\t\tHEADER.RESULT_VIEWER,\n\t\t\t\tHEADER_ICON.RESULT_VIEWER\n\t\t\t);\n\t\t}\n\t\tif (executionError) {\n\t\t\tthis.executeCommand(\n\t\t\t\tthis.getErrorCmdString(executionError),\n\t\t\t\tRESULT_INFO.CATEGORY.COPADO_SERVICE,\n\t\t\t\tRESULT_INFO.ADDITIONAL_INFORMATION.POPULATE_INFO_ON_RESULT\n\t\t\t);\n\t\t\tprocess.exit(1);\n\t\t}\n\t}\n}\n\nfunction parseDatatemplate(dataTemplateDetail) {\n\ttry {\n\t\tconst payload = JSON.parse(dataTemplateDetail);\n\t\tthis.setPayloadDataLimit(payload);\n\t\treturn payload;\n\t} catch (error) {\n\t\t// Added logs to debug the payload in case of an error\n\t\tthis.logger('Data Template Payload', payload);\n\t\tthrow new Error('The input data template information is not a valid JSON');\n\t}\n}\n\n// To replace all limitValue field (if exist) by limit field\nfunction setPayloadDataLimit(payload) {\n\tpayload.main_template['limit'] = payload.main_template['limitValue'];\n\tdelete payload.main_template['limitValue'];\n\tpayload.related_templates?.forEach(template => {\n\t\ttemplate['limit'] = template['limitValue'];\n\t\tdelete template['limitValue'];\n\t});\n}\n\nfunction populateCredentialsValues(sourceDataSetId, destinationDataSetId, dataTemplateId, queryFilterList, filterLogic, commitMessage) {\n\tconst source = {\n\t\torganizationId: sourceOrgId,\n\t\tinstance: sourceInstanceUrl,\n\t\ttoken: sourceSessionId\n\t};\n\tconst destination = {\n\t\torganizationId: destinationOrgId,\n\t\tinstance: destinationInstanceUrl,\n\t\ttoken: destinationSessionId\n\t};\n\n\tif (sourceDataSetId && sourceDataSetId.trim().length > 0 && !destinationDataSetId) {\n\t\tsource.datasetRecordId = sourceDataSetId.trim();\n\t\tsource.instance = process.env.CF_SF_ENDPOINT;\n\t\tsource.token = process.env.CF_SF_SESSIONID;\n\t} else if (destinationDataSetId && destinationDataSetId.trim().length > 0 && !sourceDataSetId) {\n\t\tdestination.datasetRecordId = destinationDataSetId.trim();\n\t\tdestination.instance = process.env.CF_SF_ENDPOINT;\n\t\tdestination.token = process.env.CF_SF_SESSIONID;\n\t} else {\n\t\tthrow new Error('The input data for the function is invalid. Dataset Id can be on either source or destination, not both');\n\t}\n\n\tconst dataTemplate = (destinationDataSetId && destinationDataSetId.trim().length > 0 && !sourceDataSetId) ? this.getDataTemplateInfo(dataTemplateId, queryFilterList, filterLogic, destinationOrgId) : null;\n\n\tconst result = {\n\t\tcommitMessage,\n\t\torg_credentials: {\n\t\t\tsource,\n\t\t\tdestination\n\t\t},\n\t\tdataTemplate\n\t};\n\treturn result;\n}\n   \nasync function initiateDataDeployment(payload) {\n\tconst result = await this.sendRequest('/ddapi/data_deploy', request.POST, response.TYPE.JSON, payload);\n\t// Added logs to debug in case of unprecedented response from the api\n\tthis.asyncCopadoLogMessage('Initiate data set Process');\n\tif (!result?.deploymentId) {\n\t\tthrow new Error(`${result.status} - ${result.errorMessage ? result.errorMessage : result.error}`);\n\t}\n\treturn result.deploymentId;\n}\n\nfunction pollDataDeploymentStatus(deploymentId) {\n\treturn new Promise((resolve, reject) => {\n\t\tthis.asyncCopadoLogMessage('Polling data set process status');\n\t\tconst pollDeploymentStatus = setInterval(async () => {\n\t\t\tconst result = await this.sendRequest(`/ddapi/data_job/${deploymentId}/status`, request.GET, response.TYPE.JSON);\n\t\t\t// Adding debug to track progress in logs\n\t\t\tswitch (result.status) {\n\t\t\t\tcase response.STATUS.FAILED:\n\t\t\t\t\tclearInterval(pollDeploymentStatus);\n\t\t\t\t\treject(new Error(result.step));\n\t\t\t\t\tbreak;\n\t\t\t\tcase response.STATUS.COMPLETED:\n\t\t\t\t\tthis.asyncCopadoLogMessage(result.step);\n\t\t\t\t\tclearInterval(pollDeploymentStatus);\n\t\t\t\t\tresolve();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.asyncCopadoLogMessage(result.step);\n\t\t\t}\n\t\t}, pollInterval);\n\t});\n}\n\nfunction configureResultColumn(sourceDataSetId, destinationDataSetId) {\n\t// Deploy data set\n\tif (sourceDataSetId && sourceDataSetId.trim().length > 0 && !destinationDataSetId) {\n\t\tHEADER.DEPLOYMENT_SUMMARY_VIEWER.label = 'Data Set Deployment Result';\n\t\tHEADER.DEPLOYMENT_SUMMARY_VIEWER.customLabel = 'Data_Set_Deployment_Result';\n\t\tTABLE_COLUMNS.DEPLOYMENT_SUMMARY_VIEWER.push(CSV_COLUMN);\n\t}\n\t// Generate data set\n\telse if (destinationDataSetId && destinationDataSetId.trim().length > 0 && !sourceDataSetId) {\n\t\tHEADER.DEPLOYMENT_SUMMARY_VIEWER.label = 'Data Set Generation Result';\n\t\tHEADER.DEPLOYMENT_SUMMARY_VIEWER.customLabel = 'Data_Set_Generation_Result';\n\t}\n}\n\nasync function downloadDataDeploymentResult(deploymentId) {\n\tthis.asyncCopadoLogMessage('Downloading data set process result');\n\tconst result = await this.sendRequest(`/ddapi/data_job/${deploymentId}/result`, request.GET, response.TYPE.BUFFER);\n\tfs.writeFileSync(RESULT_ZIP_FILE_PATH, result);\n\tthis.executeCommand(\n\t\t`unzip -d ${DATA_DEPLOYMENT_RESULT_DIR} ${RESULT_ZIP_FILE_PATH}`,\n\t\tRESULT_INFO.CATEGORY.FILE_SYSTEM,\n\t\tRESULT_INFO.ADDITIONAL_INFORMATION.EXTRACT_DATA_DEPLOYMENT_RESULT\n\t);\n}\n\nasync function sendRequest(path, method, responseType, payload) {\n\tlet result;\n\ttry {\n\t\tconst apiResponse = await fetch(CF_BACKEND_ENDPOINT + path, this.getOptions(method, payload));\n\t\tswitch (responseType) {\n\t\t\tcase response.TYPE.BUFFER:\n\t\t\t\tresult = Buffer.from(await apiResponse.arrayBuffer());\n\t\t\t\tbreak;\n\t\t\tcase response.TYPE.JSON:\n\t\t\t\tresult = await apiResponse.json();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tresult = await apiResponse.text();\n\t\t}\n\t} catch (error) {\n\t\tthrow new Error(`ERROR: ${method} ${path} : ${error}`);\n\t}\n\treturn result;\n}\n\nfunction getOptions(method, payload) {\n\tconst options = {\n\t\tmethod: method,\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\t};\n\tif (method === request.POST) {\n\t\toptions.body = JSON.stringify(payload);\n\t}\n\treturn options;\n}\n\nfunction uploadDataDeploymentInfoOnResult() {\n\tthis.asyncCopadoLogMessage('Uploading data set process detail files on the result record');\n\n\tfs.readdirSync(DATA_DEPLOYMENT_RESULT_DIR, { encoding: 'utf-8' })?.forEach(file => {\n\t\tthis.populateResultViewer(\n\t\t\tRESULT_INFO.LEVEL.INFO,\n\t\t\tRESULT_INFO.CATEGORY.COPADO_SERVICE,\n\t\t\tRESULT_INFO.ADDITIONAL_INFORMATION.UPLOAD_FILES,\n\t\t\t`${DATA_DEPLOYMENT_RESULT_DIR}/${file}`\n\t\t);\n\t\tthis.executeCommand(`copado --uploadfile '${DATA_DEPLOYMENT_RESULT_DIR}/${file}'`);\n\t});\n\n\tlet deploymentSummary = this.getDeploymentSummary(`${DATA_DEPLOYMENT_RESULT_DIR}/${FILE_NAMES.DEPLOYMENT_SUMMARY_JSON}`);\n\tthis.addTotalRecordInfo(deploymentSummary);\n\tthis.uploadResultTableJson(\n\t\tdeploymentSummary,\n\t\tTABLE_COLUMNS.DEPLOYMENT_SUMMARY_VIEWER,\n\t\tFILE_NAMES.DEPLOYMENT_SUMMARY_VIEWER,\n\t\tHEADER.DEPLOYMENT_SUMMARY_VIEWER,\n\t\tHEADER_ICON.DEPLOYMENT_SUMMARY_VIEWER\n\t);\n\n\tconst resultData = this.getResultData(deploymentSummary);\n\n\tif (resultData) {\n\t\tthis.populateResultViewer(RESULT_INFO.LEVEL.INFO, RESULT_INFO.CATEGORY.COPADO_SERVICE, 'Updating data set process info', resultData);\n\t\tthis.executeCommand(\n\t\t\t`copado -p 'Updating data set process info' -r '${resultData}'`,\n\t\t\tRESULT_INFO.CATEGORY.COPADO_SERVICE,\n\t\t\tRESULT_INFO.ADDITIONAL_INFORMATION.POPULATE_INFO_ON_RESULT\n\t\t);\n\t}\n}\n\nfunction getDeploymentSummary(filePath) {\n\tlet result = '';\n\tif (fs.existsSync(filePath)) {\n\t\tconst fileData = fs.readFileSync(filePath, 'utf-8');\n\t\tif (fileData) {\n\t\t\tresult = JSON.parse(fileData);\n\t\t}\n\t}\n\treturn result;\n}\nfunction getResultData(deploymentSummary) {\n\tlet result = '';\n\tif (deploymentSummary) {\n\t\tresult = deploymentSummary\n\t\t\t.map(templateDeploymentResult =>\n\t\t\t\tObject.keys(templateDeploymentResult)\n\t\t\t\t\t.map(key => `${key} : ${templateDeploymentResult[key]}`)\n\t\t\t\t\t.join('\\n')\n\t\t\t)\n\t\t\t.join('\\n------------------------\\n');\n\t\tresult =\n\t\t\t'To find more info related to the data set process result, please look at the deployment_summary.json attached to this result record\\n' +\n\t\t\tresult;\n\t}\n\treturn result?.substring(0, 131070); // truncating the string to prevent the length from exceeding Long Text Area(131072) size limit\n}\n\nfunction addTotalRecordInfo(deploymentSummary) {\n\tdeploymentSummary.forEach(summary => {\n\t\tsummary.totalRecords = summary.deployedRecords + summary.failedRecords;\n\t});\n}\n\nfunction getErrorCmdString(error) {\n\tconst suffix = 'Please check the logs for details.';\n\treturn `copado -p 'Error' -e \"${error?.substring(0, 32765)}. ${suffix}\"`;\n}\n\nfunction getPath(filePath) {\n\treturn filePath;\n}\n\nfunction executeCommand(command, category, additionalnfo, hasJsonResponse) {\n\tlet errorMessage;\n\tconst options = {\n\t\tshell: true,\n\t\tmaxBuffer: MAXBUFFER\n\t};\n\tconst response = child_process.spawnSync(command, options);\n\tconst { outputStream, errorStream } = this.log(response);\n\tif (response?.status == 0) {\n\t\treturn hasJsonResponse ? JSON.parse(outputStream) : outputStream;\n\t}\n\tif (!hasJsonResponse) {\n\t\terrorMessage = errorStream ? errorStream : `Error executing the command ${command}`;\n\t} else {\n\t\ttry {\n\t\t\treturn JSON.parse(outputStream);\n\t\t} catch (error) {\n\t\t\terrorMessage = errorStream ? errorStream : `Error executing the command ${command}`;\n\t\t}\n\t}\n\tif (errorMessage) {\n\t\tthis.populateResultViewer(RESULT_INFO.LEVEL.ERROR, category, additionalnfo, errorMessage);\n\t\tthrow new CommandExecutionError(errorMessage);\n\t}\n}\n\nfunction log(response) {\n\tconst outputStream = response?.stdout?.toString().trim();\n\tconst errorStream = response?.stderr?.toString().trim();\n\tif (outputStream) {\n\t\tthis.logger('Stream log', outputStream);\n\t}\n\tif (errorStream) {\n\t\tthis.logger('Stream log', errorStream);\n\t}\n\treturn { outputStream, errorStream };\n}\n\nfunction asyncCopadoLogMessage(msg, level) {\n\tthis.populateResultViewer(level ? level : RESULT_INFO.LEVEL.INFO, RESULT_INFO.CATEGORY.COPADO_INFO, '', msg);\n\tnew Promise(resolve => {\n\t\tchild_process.exec(`copado -p \"${msg}\"`, { stdio: STDIO.INHERIT }, () => {\n\t\t\tresolve();\n\t\t});\n\t});\n}\n\nfunction populateResultViewer(level, category, additionalInfo, message) {\n\tresultViewerJson.push({\n\t\tLevel: level,\n\t\tCategory: category,\n\t\tMessage: message,\n\t\tAdditionalInformation: additionalInfo\n\t});\n}\n\nfunction uploadResultTableJson(data, columns, fileName, header, headerIcon) {\n\tconst RESULT_VIEWER_JSON_PATH = `${TEMP_DIRECTORY}/${fileName}`;\n\n\tconst fileContent = {\n\t\tdata,\n\t\tcolumns,\n\t\theader,\n\t\theaderIcon\n\t};\n\tfs.writeFileSync(RESULT_VIEWER_JSON_PATH, JSON.stringify(fileContent, null, 2));\n\tthis.uploadFileAtPath(RESULT_VIEWER_JSON_PATH);\n}\n\nfunction uploadFileAtPath(filePath) {\n\tnew Promise((resolve, reject) => {\n\t\tchild_process.exec(`copado --uploadfile ${filePath}`, {}, (error, stdout, stderr) => {\n\t\t\tif (error?.code) {\n\t\t\t\tconst errorResponse = stderr ? stderr : `Error executing the command : ${error?.cmd}`;\n\t\t\t\tthis.populateResultViewer(\n\t\t\t\t\tRESULT_INFO.LEVEL.ERROR,\n\t\t\t\t\tRESULT_INFO.CATEGORY.COPADO_SERVICE,\n\t\t\t\t\t`Uploading file at ${filePath}`,\n\t\t\t\t\terrorResponse\n\t\t\t\t);\n\t\t\t\treject(new CommandExecutionError(errorResponse));\n\t\t\t} else {\n\t\t\t\tresolve();\n\t\t\t}\n\t\t});\n\t});\n}\n\nfunction logger(label, info) {\n\tconsole.log(label, ': ', info);\n}\n\nclass CommandExecutionError extends Error {\n\tconstructor(message) {\n\t\tsuper(message);\n\t\tthis.name = CUSTOM_ERROR.COMMAND_EXECUTION_ERROR;\n\t}\n}\n\nfunction getDataTemplateInfo(dataTemplateId, queryFilterList, filterLogic, dataTemplateEnvId) {\n\tif (!dataTemplateId) {\n\t\tthrow new Error('Data template ID is empty');\n\t}\n\tconst dataTemplate = {\n\t\tdataTemplateId,\n\t\tcopadoOrg: {\n\t\t\torganizationId: dataTemplateEnvId,\n\t\t\tinstance: process.env.CF_SF_ENDPOINT,\n\t\t\ttoken: process.env.CF_SF_SESSIONID\n\t\t},\n\t\tfilterLogic: filterLogic,\n        queryFilterList: queryFilterList\n\t};\n\treturn dataTemplate;\n}\n\nmodule.exports.initiateDataDeployment = initiateDataDeployment;\nmodule.exports.pollDataDeploymentStatus = pollDataDeploymentStatus;\nmodule.exports.populateCredentialsValues = populateCredentialsValues;\nmodule.exports.downloadDataDeploymentResult = downloadDataDeploymentResult;\nmodule.exports.sendRequest = sendRequest;\nmodule.exports.getOptions = getOptions;\nmodule.exports.uploadDataDeploymentInfoOnResult = uploadDataDeploymentInfoOnResult;\nmodule.exports.getErrorCmdString = getErrorCmdString;\nmodule.exports.getPath = getPath;\nmodule.exports.executeCommand = executeCommand;\nmodule.exports.log = log;\nmodule.exports.execute = execute;\nmodule.exports.getResultData = getResultData;\nmodule.exports.parseDatatemplate = parseDatatemplate;\nmodule.exports.setPayloadDataLimit = setPayloadDataLimit;\nmodule.exports.logger = logger;\nmodule.exports.asyncCopadoLogMessage = asyncCopadoLogMessage;\nmodule.exports.populateResultViewer = populateResultViewer;\nmodule.exports.uploadResultTableJson = uploadResultTableJson;\nmodule.exports.getDeploymentSummary = getDeploymentSummary;\nmodule.exports.uploadFileAtPath = uploadFileAtPath;\nmodule.exports.CommandExecutionError = CommandExecutionError;\nmodule.exports.configureResultColumn = configureResultColumn;\nmodule.exports.addTotalRecordInfo = addTotalRecordInfo;\nmodule.exports.getDataTemplateInfo = getDataTemplateInfo;\n\nthis.execute();",
          "copado__Type__c": "Standard",
          "copado__Worker_Size__c": "S",
          "Id": "a0oUB000001K7snYAC",
          "LastReferencedDate": "2024-06-24T10:13:28.000+0000",
          "LastViewedDate": "2024-06-24T10:13:28.000+0000",
          "Name": "SFDX Data Set"
        }
      ],
      "ObjectType": "copado__Function__c"
    },
    {
      "Records": [
        {
          "attributes": {
            "type": "copado__JobTemplate__c",
            "url": "/services/data/v61.0/sobjects/copado__JobTemplate__c/a0xUB000000IjRhYAK"
          },
          "copado__ApiName__c": "SFDX_Generate_Data_Set_1",
          "copado__Type__c": "Standard",
          "copado__Version__c": 1,
          "Id": "a0xUB000000IjRhYAK",
          "Name": "SFDX Generate Data Set"
        },
        {
          "attributes": {
            "type": "copado__JobTemplate__c",
            "url": "/services/data/v61.0/sobjects/copado__JobTemplate__c/a0xUB000000JNddYAG"
          },
          "copado__ApiName__c": "SFDX_Deploy_Data_Set_1",
          "copado__Type__c": "Standard",
          "copado__Version__c": 1,
          "Id": "a0xUB000000JNddYAG",
          "Name": "SFDX Deploy Data Set"
        }
      ],
      "ObjectType": "copado__JobTemplate__c"
    },
    {
      "Records": [
        {
          "attributes": {
            "type": "copado__JobStep__c",
            "url": "/services/data/v61.0/sobjects/copado__JobStep__c/a0wUB000000MjrJYAS"
          },
          "copado__ApiName__c": "Generate_Data_Set_Job_Template_1_Run_sfdx_data_set_function_1",
          "copado__ConfigJson__c": "{\"functionName\":\"SFDX_Data_Set\",\"parameters\":[{\"name\":\"sourceOrgId\",\"value\":\"{$Source.Id}\",\"required\":true},{\"name\":\"sourceInstanceUrl\",\"value\":\"{$Source.Credential.EndpointURL}\",\"required\":true},{\"name\":\"sourceSessionId\",\"value\":\"{$Source.Credential.SessionId}\",\"required\":true},{\"name\":\"destinationOrgId\",\"value\":\"{$Destination.Id}\",\"required\":true},{\"name\":\"destinationInstanceUrl\",\"value\":\"{$Destination.Credential.EndpointURL}\",\"required\":true},{\"name\":\"destinationSessionId\",\"value\":\"{$Destination.Credential.SessionId}\",\"required\":true},{\"name\":\"dataJson\",\"value\":\"{$Context.JobExecution__r.DataJson__c}\",\"required\":true},{\"name\":\"maxBuffer\",\"value\":\"5242880\",\"required\":true},{\"name\":\"pollInterval\",\"value\":\"5000\",\"required\":true}]}",
          "copado__CustomType__c": "Function",
          "copado__IsSkipped__c": false,
          "copado__JobTemplate__c": "a0xUB000000IjRhYAK",
          "copado__Order__c": 1,
          "copado__Result_Viewer_Component__c": "cmcSf:resultViewerForDataDeploy",
          "copado__Type__c": "Function",
          "Id": "a0wUB000000MjrJYAS",
          "Name": "Run sfdx generate data set function"
        },
        {
          "attributes": {
            "type": "copado__JobStep__c",
            "url": "/services/data/v61.0/sobjects/copado__JobStep__c/a0wUB000000NXRVYA4"
          },
          "copado__ApiName__c": "SFDX_Deploy_Data_Set_1_Run_sfdx_data_set_function_1",
          "copado__ConfigJson__c": "{\"functionName\":\"SFDX_Data_Set\",\"parameters\":[{\"name\":\"sourceOrgId\",\"value\":\"{$Source.Id}\",\"required\":true},{\"name\":\"sourceInstanceUrl\",\"value\":\"{$Source.Credential.EndpointURL}\",\"required\":true},{\"name\":\"sourceSessionId\",\"value\":\"{$Source.Credential.SessionId}\",\"required\":true},{\"name\":\"destinationOrgId\",\"value\":\"{$Destination.Id}\",\"required\":true},{\"name\":\"destinationInstanceUrl\",\"value\":\"{$Destination.Credential.EndpointURL}\",\"required\":true},{\"name\":\"destinationSessionId\",\"value\":\"{$Destination.Credential.SessionId}\",\"required\":true},{\"name\":\"dataJson\",\"value\":\"{$Context.JobExecution__r.DataJson__c}\",\"required\":true},{\"name\":\"maxBuffer\",\"value\":\"5242880\",\"required\":true},{\"name\":\"pollInterval\",\"value\":\"5000\",\"required\":true}]}",
          "copado__CustomType__c": "Function",
          "copado__IsSkipped__c": false,
          "copado__JobTemplate__c": "a0xUB000000JNddYAG",
          "copado__Order__c": 1,
          "copado__Result_Viewer_Component__c": "cmcSf:resultViewerForDataDeploy",
          "copado__Type__c": "Function",
          "Id": "a0wUB000000NXRVYA4",
          "Name": "Run sfdx deploy data set function"
        }
      ],
      "ObjectType": "copado__JobStep__c"
    }
  ],
  "blobsByUID": {}
}